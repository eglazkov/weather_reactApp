{"version":3,"sources":["components/header.jsx","utils/utils.jsx","components/weatherList.jsx","actions/getWeatherByCoordinates.jsx","App.js","serviceWorker.js","reducers/fetchWeatherAPI.jsx","reducers/index.jsx","index.js"],"names":["Header","args","state","currentTab","tabClick","bind","tabSysName","this","setState","props","clickTab","tabs","className","map","item","index","onClick","key","tabName","Component","utils","daysArray","mothArray","getNameOfDay","date","getDay","Date","getBrifDate","getDate","getMonth","WeatherList","utilsObj","itemClick","console","log","weatherItems","forecasts","length","weatherindicator","parts","day_short","icon","temp","night_short","src","alt","style","textAlign","getWeatherDataByCoordinates","params","period","periodConst","point","dispatch","fetchBegin","fetch","method","headers","then","handleErrors","res","json","splice","fetchSuccess","catch","error","fetchFailure","response","ok","Error","statusText","FETCH_GETWEATHER_BEGIN","FETCH_GETWEATHER_SUCCESS","FETCH_GETWEATHER_FAILURE","type","data","payload","App","regionCoordinates","lat","lon","periodName","weatherData","connect","Boolean","window","location","hostname","match","initialState","loading","allReducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ca03019.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './header.css';\r\n\r\nclass Header extends Component {\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n      currentTab: 'for_week'\r\n    };\r\n\r\n    this.tabClick = this.tabClick.bind(this);\r\n  }\r\n\r\n  tabClick(tabSysName){\r\n    this.setState({currentTab: tabSysName});\r\n    this.props.clickTab(tabSysName);\r\n  }\r\n\r\n  render() {\r\n    const {tabs} = this.props;\r\n    return (\r\n      <div className={'tabItems'}>\r\n        <ol>\r\n          {tabs.map((item, index) => {\r\n            return(\r\n              <li onClick={this.tabClick.bind(this, item.tabSysName)} key={index} className={item.tabSysName+'' === this.state.currentTab ? 'active' : null}>\r\n                <span>{item.tabName}</span>\r\n              </li>\r\n            )\r\n          })}\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","let utils = function () {\r\n\r\n  const daysArray = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n  const mothArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n\r\n  this.getNameOfDay = function(date){\r\n    return ((typeof date === 'object' && date.getDay) || typeof date === 'string') ? daysArray[new Date(date).getDay()] : '';\r\n  };\r\n\r\n  this.getBrifDate = function(date){\r\n    return ((typeof date === 'object' && date.getDay) || typeof date === 'string') ? new Date(date).getDate() + ' ' + mothArray[new Date(date).getMonth()] : '';\r\n  };\r\n\r\n};\r\n\r\nexport default utils;","import React, {Component} from 'react';\r\nimport './weatherList.css';\r\nimport utils from \"../utils/utils\";\r\n\r\nclass WeatherList extends Component {\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n\r\n    };\r\n\r\n    const utilsObj = new utils();\r\n    this.itemClick = this.itemClick.bind(this);\r\n    this.getNameOfDay = utilsObj.getNameOfDay.bind(this);\r\n    this.getBrifDate = utilsObj.getBrifDate.bind(this);\r\n\r\n  }\r\n\r\n  itemClick(){\r\n    console.log('itemClick');\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    const {weatherItems} = this.props;\r\n    return (\r\n      <div className={'listItems'}>\r\n        <ul>\r\n          {weatherItems && weatherItems.forecasts && weatherItems.forecasts.length > 0 ? weatherItems.forecasts.map((item, index) => {\r\n            return(\r\n              <li weatherindicator={item.parts.day_short.icon || 'null'} onClick={this.itemClick.bind(this, item)} key={index} className={''}>\r\n                <span className={'leftSpan'}>\r\n                  <span className={'dayofWeek'}>{this.getNameOfDay(item.date)}</span>\r\n                  <span>\r\n                    <span className={'degrees'}>{item.parts.day_short.temp}Â° / {item.parts.night_short.temp}</span>\r\n                    <span className={'icon'}>\r\n                      <img src={'/icons/' + item.parts.day_short.icon + '.svg'} alt={''}/>\r\n                    </span>\r\n                  </span>\r\n                </span>\r\n                <span className={'briefDate'}>{this.getBrifDate(item.date)}</span>\r\n              </li>\r\n            )\r\n          }) : <h3 style={{textAlign: 'center'}}>No data</h3>}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default WeatherList;","export const getWeatherDataByCoordinates = (params) => {\r\n    const period = params.period;\r\n    const point = params.point;\r\n    let periodConst = 0;\r\n    switch (period) {\r\n        case 'for_week':\r\n            periodConst = 7;\r\n            break;\r\n        case \"for_today\":\r\n            periodConst = 1;\r\n            break;\r\n        default:\r\n            periodConst = 7;\r\n\r\n    }\r\n    return dispatch => {\r\n        dispatch(fetchBegin());\r\n        return fetch('/stub.json', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(handleErrors)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                json.forecasts = json.forecasts.splice(0, periodConst);\r\n                dispatch(fetchSuccess(json));\r\n                return json;\r\n            })\r\n            .catch(error => dispatch(fetchFailure(error)));\r\n    };\r\n};\r\n\r\nfunction handleErrors(response) {\r\n    if (!response.ok) {\r\n        throw Error(response.statusText);\r\n    }\r\n    return response;\r\n}\r\n\r\nexport const FETCH_GETWEATHER_BEGIN = 'FETCH_GETWEATHER_BEGIN';\r\nexport const FETCH_GETWEATHER_SUCCESS = 'FETCH_GETWEATHER_SUCCESS';\r\nexport const FETCH_GETWEATHER_FAILURE = 'FETCH_GETWEATHER_FAILURE';\r\n\r\nexport const fetchBegin = () => ({\r\n    type: FETCH_GETWEATHER_BEGIN\r\n});\r\n\r\nexport const fetchSuccess = data => ({\r\n    type: FETCH_GETWEATHER_SUCCESS,\r\n    payload: data\r\n});\r\n\r\nexport const fetchFailure = error => ({\r\n    type: FETCH_GETWEATHER_FAILURE,\r\n    payload: {error}\r\n});","import React , {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Header from './components/header';\r\nimport WeatherList from './components/weatherList';\r\nimport {getWeatherDataByCoordinates} from './actions/getWeatherByCoordinates';\r\n\r\nclass App extends Component{\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n      regionCoordinates: {lat: 56, lon: 38}\r\n    };\r\n\r\n    this.tabs = [\r\n      {'tabSysName': \"for_today\", 'tabName': 'Today'},\r\n      {'tabSysName': \"for_week\", 'tabName': 'Week'}\r\n    ];\r\n    /*--ÐÐ°Ð³Ð»ÑÑÐºÐ°\r\n\r\n    const icons = [\"bkn_-ra_d\",\"bkn_-sn_d\",\"bkn_d\",\"bkn_ra_d\",\"bkn_sn_d\",\"bl\",\"fg_d\",\"ovc\",\"ovc_-ra\",\"ovc_-sn\",\"ovc_ra\",\"ovc_sn\",\"ovc_ts_ra\",\"skc_d\"];\r\n    let stub = {\r\n      forecasts: []\r\n    };\r\n\r\n    for(let i=0; i<icons.length; i++){\r\n      stub.forecasts.push(\r\n        {\r\n          parts: {\r\n            day_short: {temp: 666, icon: icons[i]},\r\n            night_short: {temp: 999}\r\n          }\r\n        }\r\n      )\r\n    }\r\n    ----*/\r\n\r\n    this.clickTab = this.clickTab.bind(this);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.dispatch(getWeatherDataByCoordinates({period: 'for_week', point: this.state.regionCoordinates}));\r\n  }\r\n\r\n  clickTab(periodName){\r\n    this.props.dispatch(getWeatherDataByCoordinates({period: periodName, point: this.state.regionCoordinates}));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header tabs={this.tabs} clickTab={this.clickTab}/>\r\n        <WeatherList weatherItems={this.props.weatherData}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return{\r\n    weatherData: state.weatherData.data\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    FETCH_GETWEATHER_BEGIN,\r\n    FETCH_GETWEATHER_SUCCESS,\r\n    FETCH_GETWEATHER_FAILURE\r\n} from '../actions/getWeatherByCoordinates';\r\n\r\nconst initialState = {\r\n    data: {},\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\nexport default function weatherData(state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_GETWEATHER_BEGIN:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            };\r\n\r\n        case FETCH_GETWEATHER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                data: action.payload\r\n            };\r\n\r\n        case FETCH_GETWEATHER_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                data: {},\r\n                error: action.payload.error\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport weatherData from './fetchWeatherAPI';\r\n\r\n\r\nconst allReducers = combineReducers({\r\n    weatherData: weatherData\r\n});\r\n\r\nexport default allReducers;\r\n","import 'babel-polyfill';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {applyMiddleware, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport allReducers from './reducers';\r\n\r\nconst store = createStore(\r\n    allReducers,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}